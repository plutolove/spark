package org.apache.spark.streaming.util;
// not preceding
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("test"))
// This(TypeName("CommonWriteAheadLogTests"))
// Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix")), List()), TermName("$plus")), List(Literal(Constant("handling file errors while reading rotating logs"))))
// Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix")), List()), TermName("$plus"))
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix"))
// This(TypeName("CommonWriteAheadLogTests"))
// Literal(Constant("handling file errors while reading rotating logs"))
// Apply(TypeApply(Select(Select(Ident(scala), scala.Predef), TermName("wrapRefArray")), List(TypeTree())), List(ArrayValue(TypeTree(), List())))
// TypeApply(Select(Select(Ident(scala), scala.Predef), TermName("wrapRefArray")), List(TypeTree()))
// Select(Select(Ident(scala), scala.Predef), TermName("wrapRefArray"))
// Select(Ident(scala), scala.Predef)
// Ident(scala)
// TypeTree()
// ArrayValue(TypeTree(), List())
// TypeTree()
// Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Block(List(ValDef(Modifiers(), TermName("manualClock"), TypeTree(), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List())), ValDef(Modifiers(), TermName("dataToWrite1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List())), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Ident(TermName("dataToWrite1")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Ident(TermName("manualClock")), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6")), List()), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7")), List()))), ValDef(Modifiers(), TermName("logFiles1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("getLogFilesInDirectory")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List())))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(Select(Ident(TermName("logFiles1")), TermName("size")), List())), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Literal(Constant(1)))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant(">")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$greater")), List(Ident(TermName("$org_scalatest_assert_macro_right")))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(155))))))), ValDef(Modifiers(), TermName("dataToWrite2"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List())), Apply(Select(Ident(TermName("manualClock")), TermName("advance")), List(Literal(Constant(100000)))), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Ident(TermName("dataToWrite2")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Ident(TermName("manualClock")), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6")), List()), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7")), List()))), ValDef(Modifiers(), TermName("logFiles2"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("getLogFilesInDirectory")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List())))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(Select(Ident(TermName("logFiles2")), TermName("size")), List())), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Apply(Select(Ident(TermName("logFiles1")), TermName("size")), List()))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant(">")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$greater")), List(Ident(TermName("$org_scalatest_assert_macro_right")))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(164))))))), ValDef(Modifiers(), TermName("readData1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("readDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Ident(TermName("readData1"))))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Apply(TypeApply(Select(Ident(TermName("dataToWrite1")), TermName("$plus$plus")), List(TypeTree(), TypeTree())), List(Ident(TermName("dataToWrite2")), Apply(TypeApply(Select(Select(This(TypeName("collection")), scala.collection.Seq), TermName("canBuildFrom")), List(TypeTree())), List()))))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(168))))))), Apply(TypeApply(Select(Ident(TermName("logFiles1")), TermName("foreach")), List(TypeTree())), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("f"), TypeTree(), EmptyTree))), TypeTree(), Block(List(ValDef(Modifiers(), TermName("raf"), TypeTree(), Apply(Select(Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Ident(TermName("f")), Literal(Constant(true)))), TermName("getChannel")), List())), Apply(Select(Ident(TermName("raf")), TermName("truncate")), List(Literal(Constant(1))))), Apply(Select(Ident(TermName("raf")), TermName("close")), List())))), Function(List(ValDef(Modifiers(PARAM), TermName("f"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("f")))))))), ValDef(Modifiers(), TermName("readData"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("readDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Ident(TermName("readData"))))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Ident(TermName("dataToWrite2")))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(179)))))))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List())))
// DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Block(List(ValDef(Modifiers(), TermName("manualClock"), TypeTree(), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List())), ValDef(Modifiers(), TermName("dataToWrite1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List())), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Ident(TermName("dataToWrite1")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Ident(TermName("manualClock")), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6")), List()), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7")), List()))), ValDef(Modifiers(), TermName("logFiles1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("getLogFilesInDirectory")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List())))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(Select(Ident(TermName("logFiles1")), TermName("size")), List())), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Literal(Constant(1)))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant(">")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$greater")), List(Ident(TermName("$org_scalatest_assert_macro_right")))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(155))))))), ValDef(Modifiers(), TermName("dataToWrite2"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List())), Apply(Select(Ident(TermName("manualClock")), TermName("advance")), List(Literal(Constant(100000)))), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Ident(TermName("dataToWrite2")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Ident(TermName("manualClock")), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6")), List()), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7")), List()))), ValDef(Modifiers(), TermName("logFiles2"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("getLogFilesInDirectory")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List())))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(Select(Ident(TermName("logFiles2")), TermName("size")), List())), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Apply(Select(Ident(TermName("logFiles1")), TermName("size")), List()))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant(">")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$greater")), List(Ident(TermName("$org_scalatest_assert_macro_right")))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(164))))))), ValDef(Modifiers(), TermName("readData1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("readDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Ident(TermName("readData1"))))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Apply(TypeApply(Select(Ident(TermName("dataToWrite1")), TermName("$plus$plus")), List(TypeTree(), TypeTree())), List(Ident(TermName("dataToWrite2")), Apply(TypeApply(Select(Select(This(TypeName("collection")), scala.collection.Seq), TermName("canBuildFrom")), List(TypeTree())), List()))))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(168))))))), Apply(TypeApply(Select(Ident(TermName("logFiles1")), TermName("foreach")), List(TypeTree())), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("f"), TypeTree(), EmptyTree))), TypeTree(), Block(List(ValDef(Modifiers(), TermName("raf"), TypeTree(), Apply(Select(Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Ident(TermName("f")), Literal(Constant(true)))), TermName("getChannel")), List())), Apply(Select(Ident(TermName("raf")), TermName("truncate")), List(Literal(Constant(1))))), Apply(Select(Ident(TermName("raf")), TermName("close")), List())))), Function(List(ValDef(Modifiers(PARAM), TermName("f"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("f")))))))), ValDef(Modifiers(), TermName("readData"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("readDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Ident(TermName("readData"))))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Ident(TermName("dataToWrite2")))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(179)))))))))
// TypeTree()
// Block(List(ValDef(Modifiers(), TermName("manualClock"), TypeTree(), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List())), ValDef(Modifiers(), TermName("dataToWrite1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List())), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Ident(TermName("dataToWrite1")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Ident(TermName("manualClock")), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6")), List()), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7")), List()))), ValDef(Modifiers(), TermName("logFiles1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("getLogFilesInDirectory")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List())))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(Select(Ident(TermName("logFiles1")), TermName("size")), List())), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Literal(Constant(1)))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant(">")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$greater")), List(Ident(TermName("$org_scalatest_assert_macro_right")))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(155))))))), ValDef(Modifiers(), TermName("dataToWrite2"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List())), Apply(Select(Ident(TermName("manualClock")), TermName("advance")), List(Literal(Constant(100000)))), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Ident(TermName("dataToWrite2")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Ident(TermName("manualClock")), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6")), List()), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7")), List()))), ValDef(Modifiers(), TermName("logFiles2"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("getLogFilesInDirectory")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List())))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(Select(Ident(TermName("logFiles2")), TermName("size")), List())), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Apply(Select(Ident(TermName("logFiles1")), TermName("size")), List()))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant(">")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$greater")), List(Ident(TermName("$org_scalatest_assert_macro_right")))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(164))))))), ValDef(Modifiers(), TermName("readData1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("readDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Ident(TermName("readData1"))))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Apply(TypeApply(Select(Ident(TermName("dataToWrite1")), TermName("$plus$plus")), List(TypeTree(), TypeTree())), List(Ident(TermName("dataToWrite2")), Apply(TypeApply(Select(Select(This(TypeName("collection")), scala.collection.Seq), TermName("canBuildFrom")), List(TypeTree())), List()))))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(168))))))), Apply(TypeApply(Select(Ident(TermName("logFiles1")), TermName("foreach")), List(TypeTree())), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("f"), TypeTree(), EmptyTree))), TypeTree(), Block(List(ValDef(Modifiers(), TermName("raf"), TypeTree(), Apply(Select(Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Ident(TermName("f")), Literal(Constant(true)))), TermName("getChannel")), List())), Apply(Select(Ident(TermName("raf")), TermName("truncate")), List(Literal(Constant(1))))), Apply(Select(Ident(TermName("raf")), TermName("close")), List())))), Function(List(ValDef(Modifiers(PARAM), TermName("f"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("f")))))))), ValDef(Modifiers(), TermName("readData"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("readDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Ident(TermName("readData"))))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Ident(TermName("dataToWrite2")))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(179))))))))
// ValDef(Modifiers(), TermName("manualClock"), TypeTree(), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List()))
// ValDef(Modifiers(), TermName("dataToWrite1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List()))
// Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Ident(TermName("dataToWrite1")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Ident(TermName("manualClock")), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6")), List()), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7")), List())))
// Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog"))
// Ident(org.apache.spark.streaming.util.WriteAheadLogSuite)
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("dataToWrite1"))
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite"))
// This(TypeName("CommonWriteAheadLogTests"))
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("manualClock"))
// Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6")), List())
// Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6"))
// Ident(org.apache.spark.streaming.util.WriteAheadLogSuite)
// Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7")), List())
// Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7"))
// Ident(org.apache.spark.streaming.util.WriteAheadLogSuite)
// ValDef(Modifiers(), TermName("logFiles1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("getLogFilesInDirectory")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()))))
// Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(Select(Ident(TermName("logFiles1")), TermName("size")), List())), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Literal(Constant(1)))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant(">")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$greater")), List(Ident(TermName("$org_scalatest_assert_macro_right")))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(155)))))))
// ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(Select(Ident(TermName("logFiles1")), TermName("size")), List())), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Literal(Constant(1)))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant(">")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$greater")), List(Ident(TermName("$org_scalatest_assert_macro_right")))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))
// Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(155))))))
// Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert"))
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("$org_scalatest_assert_macro_expr"))
// Literal(Constant(""))
// Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())
// Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default"))
// Select(This(TypeName("scalactic")), org.scalactic.Prettifier)
// This(TypeName("scalactic"))
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(155))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(155))
// ValDef(Modifiers(), TermName("dataToWrite2"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List()))
// Apply(Select(Ident(TermName("manualClock")), TermName("advance")), List(Literal(Constant(100000))))
// Select(Ident(TermName("manualClock")), TermName("advance"))
// Ident(TermName("manualClock"))
// Literal(Constant(100000))
// Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Ident(TermName("dataToWrite2")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Ident(TermName("manualClock")), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6")), List()), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7")), List())))
// Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog"))
// Ident(org.apache.spark.streaming.util.WriteAheadLogSuite)
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("dataToWrite2"))
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite"))
// This(TypeName("CommonWriteAheadLogTests"))
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("manualClock"))
// Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6")), List())
// Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$6"))
// Ident(org.apache.spark.streaming.util.WriteAheadLogSuite)
// Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7")), List())
// Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataUsingWriteAheadLog$default$7"))
// Ident(org.apache.spark.streaming.util.WriteAheadLogSuite)
// ValDef(Modifiers(), TermName("logFiles2"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("getLogFilesInDirectory")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()))))
// Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(Select(Ident(TermName("logFiles2")), TermName("size")), List())), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Apply(Select(Ident(TermName("logFiles1")), TermName("size")), List()))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant(">")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$greater")), List(Ident(TermName("$org_scalatest_assert_macro_right")))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(164)))))))
// ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(Select(Ident(TermName("logFiles2")), TermName("size")), List())), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Apply(Select(Ident(TermName("logFiles1")), TermName("size")), List()))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant(">")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$greater")), List(Ident(TermName("$org_scalatest_assert_macro_right")))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))
// Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(164))))))
// Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert"))
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("$org_scalatest_assert_macro_expr"))
// Literal(Constant(""))
// Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())
// Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default"))
// Select(This(TypeName("scalactic")), org.scalactic.Prettifier)
// This(TypeName("scalactic"))
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(164))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(164))
// ValDef(Modifiers(), TermName("readData1"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("readDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")))))
// Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Ident(TermName("readData1"))))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Apply(TypeApply(Select(Ident(TermName("dataToWrite1")), TermName("$plus$plus")), List(TypeTree(), TypeTree())), List(Ident(TermName("dataToWrite2")), Apply(TypeApply(Select(Select(This(TypeName("collection")), scala.collection.Seq), TermName("canBuildFrom")), List(TypeTree())), List()))))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(168)))))))
// ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Ident(TermName("readData1"))))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Apply(TypeApply(Select(Ident(TermName("dataToWrite1")), TermName("$plus$plus")), List(TypeTree(), TypeTree())), List(Ident(TermName("dataToWrite2")), Apply(TypeApply(Select(Select(This(TypeName("collection")), scala.collection.Seq), TermName("canBuildFrom")), List(TypeTree())), List()))))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))
// Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(168))))))
// Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert"))
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("$org_scalatest_assert_macro_expr"))
// Literal(Constant(""))
// Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())
// Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default"))
// Select(This(TypeName("scalactic")), org.scalactic.Prettifier)
// This(TypeName("scalactic"))
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(168))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(168))
// Apply(TypeApply(Select(Ident(TermName("logFiles1")), TermName("foreach")), List(TypeTree())), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("f"), TypeTree(), EmptyTree))), TypeTree(), Block(List(ValDef(Modifiers(), TermName("raf"), TypeTree(), Apply(Select(Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Ident(TermName("f")), Literal(Constant(true)))), TermName("getChannel")), List())), Apply(Select(Ident(TermName("raf")), TermName("truncate")), List(Literal(Constant(1))))), Apply(Select(Ident(TermName("raf")), TermName("close")), List())))), Function(List(ValDef(Modifiers(PARAM), TermName("f"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("f"))))))))
// TypeApply(Select(Ident(TermName("logFiles1")), TermName("foreach")), List(TypeTree()))
// Select(Ident(TermName("logFiles1")), TermName("foreach"))
// Ident(TermName("logFiles1"))
// TypeTree()
// Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("f"), TypeTree(), EmptyTree))), TypeTree(), Block(List(ValDef(Modifiers(), TermName("raf"), TypeTree(), Apply(Select(Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Ident(TermName("f")), Literal(Constant(true)))), TermName("getChannel")), List())), Apply(Select(Ident(TermName("raf")), TermName("truncate")), List(Literal(Constant(1))))), Apply(Select(Ident(TermName("raf")), TermName("close")), List())))), Function(List(ValDef(Modifiers(PARAM), TermName("f"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("f"))))))
// DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("f"), TypeTree(), EmptyTree))), TypeTree(), Block(List(ValDef(Modifiers(), TermName("raf"), TypeTree(), Apply(Select(Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Ident(TermName("f")), Literal(Constant(true)))), TermName("getChannel")), List())), Apply(Select(Ident(TermName("raf")), TermName("truncate")), List(Literal(Constant(1))))), Apply(Select(Ident(TermName("raf")), TermName("close")), List())))
// ValDef(Modifiers(PARAM | SYNTHETIC), TermName("f"), TypeTree(), EmptyTree)
// TypeTree()
// Block(List(ValDef(Modifiers(), TermName("raf"), TypeTree(), Apply(Select(Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Ident(TermName("f")), Literal(Constant(true)))), TermName("getChannel")), List())), Apply(Select(Ident(TermName("raf")), TermName("truncate")), List(Literal(Constant(1))))), Apply(Select(Ident(TermName("raf")), TermName("close")), List()))
// ValDef(Modifiers(), TermName("raf"), TypeTree(), Apply(Select(Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Ident(TermName("f")), Literal(Constant(true)))), TermName("getChannel")), List()))
// Apply(Select(Ident(TermName("raf")), TermName("truncate")), List(Literal(Constant(1))))
// Select(Ident(TermName("raf")), TermName("truncate"))
// Ident(TermName("raf"))
// Literal(Constant(1))
// Apply(Select(Ident(TermName("raf")), TermName("close")), List())
// Select(Ident(TermName("raf")), TermName("close"))
// Ident(TermName("raf"))
// Function(List(ValDef(Modifiers(PARAM), TermName("f"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("f")))))
// ValDef(Modifiers(PARAM), TermName("f"), TypeTree(), EmptyTree)
// Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("f"))))
// Ident(TermName("$anonfun$new"))
// Ident(TermName("f"))
// ValDef(Modifiers(), TermName("readData"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("readDataUsingWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")))))
// Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Ident(TermName("readData"))))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Ident(TermName("dataToWrite2")))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(179)))))))
// ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Ident(TermName("readData"))))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Ident(TermName("dataToWrite2")))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))
// Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(179))))))
// Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert"))
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("$org_scalatest_assert_macro_expr"))
// Literal(Constant(""))
// Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())
// Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default"))
// Select(This(TypeName("scalactic")), org.scalactic.Prettifier)
// This(TypeName("scalactic"))
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(179))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(179))
// Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))
// Apply(Ident(TermName("$anonfun$new")), List())
// Ident(TermName("$anonfun$new"))
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(148))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(148))
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("test"))
// This(TypeName("CommonWriteAheadLogTests"))
// Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix")), List()), TermName("$plus")), List(Literal(Constant("do not create directories or files unless write"))))
// Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix")), List()), TermName("$plus"))
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix"))
// This(TypeName("CommonWriteAheadLogTests"))
// Literal(Constant("do not create directories or files unless write"))
// Apply(TypeApply(Select(Select(Ident(scala), scala.Predef), TermName("wrapRefArray")), List(TypeTree())), List(ArrayValue(TypeTree(), List())))
// TypeApply(Select(Select(Ident(scala), scala.Predef), TermName("wrapRefArray")), List(TypeTree()))
// Select(Select(Ident(scala), scala.Predef), TermName("wrapRefArray"))
// Select(Ident(scala), scala.Predef)
// Ident(scala)
// TypeTree()
// ArrayValue(TypeTree(), List())
// TypeTree()
// Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Block(List(ValDef(Modifiers(), TermName("nonexistentTempPath"), TypeTree(), Apply(Select(Select(Select(Ident(java), java.io), java.io.File), TermName("createTempFile")), List(Literal(Constant("test")), Literal(Constant(""))))), Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("delete")), List()), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(185))))))), ValDef(Modifiers(), TermName("writtenSegment"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataManually")), List(Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List()), Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testFile")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), ValDef(Modifiers(), TermName("wal"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("createWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("Directory created just by creating log object")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(189))))))), If(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Ident(scala), scala.package), TypeName("UnsupportedOperationException"))))), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))), Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(UnsupportedOperationException)))), TypeTree()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(191)))))), Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List()))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("Directory created just by attempting to read segment")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(195)))))))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List())))
// DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Block(List(ValDef(Modifiers(), TermName("nonexistentTempPath"), TypeTree(), Apply(Select(Select(Select(Ident(java), java.io), java.io.File), TermName("createTempFile")), List(Literal(Constant("test")), Literal(Constant(""))))), Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("delete")), List()), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(185))))))), ValDef(Modifiers(), TermName("writtenSegment"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataManually")), List(Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List()), Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testFile")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), ValDef(Modifiers(), TermName("wal"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("createWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("Directory created just by creating log object")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(189))))))), If(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Ident(scala), scala.package), TypeName("UnsupportedOperationException"))))), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))), Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(UnsupportedOperationException)))), TypeTree()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(191)))))), Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List()))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("Directory created just by attempting to read segment")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(195)))))))))
// TypeTree()
// Block(List(ValDef(Modifiers(), TermName("nonexistentTempPath"), TypeTree(), Apply(Select(Select(Select(Ident(java), java.io), java.io.File), TermName("createTempFile")), List(Literal(Constant("test")), Literal(Constant(""))))), Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("delete")), List()), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(185))))))), ValDef(Modifiers(), TermName("writtenSegment"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataManually")), List(Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List()), Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testFile")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), ValDef(Modifiers(), TermName("wal"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("createWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("Directory created just by creating log object")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(189))))))), If(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Ident(scala), scala.package), TypeName("UnsupportedOperationException"))))), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))), Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(UnsupportedOperationException)))), TypeTree()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(191)))))), Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List()))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("Directory created just by attempting to read segment")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(195))))))))
// ValDef(Modifiers(), TermName("nonexistentTempPath"), TypeTree(), Apply(Select(Select(Select(Ident(java), java.io), java.io.File), TermName("createTempFile")), List(Literal(Constant("test")), Literal(Constant("")))))
// Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("delete")), List())
// Select(Ident(TermName("nonexistentTempPath")), TermName("delete"))
// Ident(TermName("nonexistentTempPath"))
// Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(185)))))))
// ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))
// Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(185))))))
// Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert"))
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("$org_scalatest_assert_macro_expr"))
// Literal(Constant(""))
// Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())
// Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default"))
// Select(This(TypeName("scalactic")), org.scalactic.Prettifier)
// This(TypeName("scalactic"))
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(185))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(185))
// ValDef(Modifiers(), TermName("writtenSegment"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataManually")), List(Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List()), Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testFile")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")))))
// ValDef(Modifiers(), TermName("wal"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("createWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")))))
// Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("Directory created just by creating log object")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(189)))))))
// ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))
// Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("Directory created just by creating log object")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(189))))))
// Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert"))
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("$org_scalatest_assert_macro_expr"))
// Literal(Constant("Directory created just by creating log object"))
// Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())
// Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default"))
// Select(This(TypeName("scalactic")), org.scalactic.Prettifier)
// This(TypeName("scalactic"))
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(189))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(189))
// If(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Ident(scala), scala.package), TypeName("UnsupportedOperationException"))))), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))), Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(UnsupportedOperationException)))), TypeTree()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(191)))))), Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List()))))
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))
// This(TypeName("CommonWriteAheadLogTests"))
// Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Ident(scala), scala.package), TypeName("UnsupportedOperationException"))))), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))), Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(UnsupportedOperationException)))), TypeTree()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(191))))))
// TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Ident(scala), scala.package), TypeName("UnsupportedOperationException")))))
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept"))
// This(TypeName("CommonWriteAheadLogTests"))
// TypeTree().setOriginal(Select(Select(Ident(scala), scala.package), TypeName("UnsupportedOperationException")))
// Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List())))
// DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List()))))
// TypeTree()
// Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List())))
// Select(Ident(TermName("wal")), TermName("read"))
// Ident(TermName("wal"))
// Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List())
// Select(Ident(TermName("writtenSegment")), TermName("head"))
// Ident(TermName("writtenSegment"))
// Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))
// Apply(Ident(TermName("$anonfun$new")), List())
// Ident(TermName("$anonfun$new"))
// Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(UnsupportedOperationException)))), TypeTree())
// Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(UnsupportedOperationException))))
// TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree()))
// Select(Ident(scala.reflect.ClassTag), TermName("apply"))
// Ident(scala.reflect.ClassTag)
// TypeTree()
// Literal(Constant(UnsupportedOperationException))
// TypeTree()
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(191))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(191))
// Apply(Select(Ident(TermName("wal")), TermName("read")), List(Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List())))
// Select(Ident(TermName("wal")), TermName("read"))
// Ident(TermName("wal"))
// Apply(Select(Ident(TermName("writtenSegment")), TermName("head")), List())
// Select(Ident(TermName("writtenSegment")), TermName("head"))
// Ident(TermName("writtenSegment"))
// Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("Directory created just by attempting to read segment")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(195)))))))
// ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("notBool")), List(Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("simpleMacroBool")), List(Apply(Select(Ident(TermName("nonexistentTempPath")), TermName("exists")), List()), Literal(Constant("nonexistentTempPath.exists()")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()))))
// Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("Directory created just by attempting to read segment")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(195))))))
// Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert"))
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("$org_scalatest_assert_macro_expr"))
// Literal(Constant("Directory created just by attempting to read segment"))
// Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())
// Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default"))
// Select(This(TypeName("scalactic")), org.scalactic.Prettifier)
// This(TypeName("scalactic"))
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(195))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(195))
// Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))
// Apply(Ident(TermName("$anonfun$new")), List())
// Ident(TermName("$anonfun$new"))
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(182))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(182))
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("test"))
// This(TypeName("CommonWriteAheadLogTests"))
// Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix")), List()), TermName("$plus")), List(Literal(Constant("parallel recovery not enabled if closeFileAfterWrite = false"))))
// Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix")), List()), TermName("$plus"))
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testPrefix"))
// This(TypeName("CommonWriteAheadLogTests"))
// Literal(Constant("parallel recovery not enabled if closeFileAfterWrite = false"))
// Apply(TypeApply(Select(Select(Ident(scala), scala.Predef), TermName("wrapRefArray")), List(TypeTree())), List(ArrayValue(TypeTree(), List())))
// TypeApply(Select(Select(Ident(scala), scala.Predef), TermName("wrapRefArray")), List(TypeTree()))
// Select(Select(Ident(scala), scala.Predef), TermName("wrapRefArray"))
// Select(Ident(scala), scala.Predef)
// Ident(scala)
// TypeTree()
// ArrayValue(TypeTree(), List())
// TypeTree()
// Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Block(List(ValDef(Modifiers(), TermName("writtenData"), TypeTree(), Apply(TypeApply(Select(Apply(Select(Apply(Select(Select(Ident(scala), scala.Predef), TermName("intWrapper")), List(Literal(Constant(1)))), TermName("to")), List(Literal(Constant(10)))), TermName("flatMap")), List(TypeTree(), TypeTree())), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("i"), TypeTree(), EmptyTree))), TypeTree(), Block(List(ValDef(Modifiers(), TermName("data"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List())), ValDef(Modifiers(), TermName("file"), TypeTree(), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), TermName("$plus")), List(Apply(Select(Apply(Select(Apply(Select(Literal(Constant("/log-")), TermName("$plus")), List(Ident(TermName("i")))), TermName("$plus")), List(Literal(Constant("-")))), TermName("$plus")), List(Ident(TermName("i"))))))), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataManually")), List(Ident(TermName("data")), Ident(TermName("file")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), Ident(TermName("data"))))), Function(List(ValDef(Modifiers(PARAM), TermName("i"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("i")))))), Apply(TypeApply(Select(Select(This(TypeName("immutable")), scala.collection.immutable.IndexedSeq), TermName("canBuildFrom")), List(TypeTree())), List())))), ValDef(Modifiers(), TermName("wal"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("createWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), ValDef(Modifiers(), TermName("readData"), TypeTree(), Apply(TypeApply(Select(Apply(Select(Apply(TypeApply(Select(Select(Select(Ident(scala), scala.collection), scala.collection.JavaConverters), TermName("asScalaIteratorConverter")), List(TypeTree())), List(Apply(Select(Ident(TermName("wal")), TermName("readAll")), List()))), TermName("asScala")), List()), TermName("map")), List(TypeTree())), List(Block(List(), Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("byteBuffer"), TypeTree(), EmptyTree))), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("byteBufferToString")), List(Ident(TermName("byteBuffer")))))), Function(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("byteBuffer"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("byteBuffer")))))))))), Apply(Select(Ident(TermName("wal")), TermName("close")), List())), If(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Select(Ident(java), java.util), java.util.concurrent), java.util.concurrent.RejectedExecutionException)))), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(TypeApply(Select(Ident(TermName("readData")), TermName("toArray")), List(TypeTree())), List(Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(String)))), TypeTree()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))), Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(java.util.concurrent.RejectedExecutionException)))), TypeTree()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(214)))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Apply(Select(Ident(TermName("readData")), TermName("toSeq")), List())))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Ident(TermName("writtenData")))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(216))))))))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List())))
// DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Block(List(ValDef(Modifiers(), TermName("writtenData"), TypeTree(), Apply(TypeApply(Select(Apply(Select(Apply(Select(Select(Ident(scala), scala.Predef), TermName("intWrapper")), List(Literal(Constant(1)))), TermName("to")), List(Literal(Constant(10)))), TermName("flatMap")), List(TypeTree(), TypeTree())), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("i"), TypeTree(), EmptyTree))), TypeTree(), Block(List(ValDef(Modifiers(), TermName("data"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List())), ValDef(Modifiers(), TermName("file"), TypeTree(), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), TermName("$plus")), List(Apply(Select(Apply(Select(Apply(Select(Literal(Constant("/log-")), TermName("$plus")), List(Ident(TermName("i")))), TermName("$plus")), List(Literal(Constant("-")))), TermName("$plus")), List(Ident(TermName("i"))))))), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataManually")), List(Ident(TermName("data")), Ident(TermName("file")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), Ident(TermName("data"))))), Function(List(ValDef(Modifiers(PARAM), TermName("i"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("i")))))), Apply(TypeApply(Select(Select(This(TypeName("immutable")), scala.collection.immutable.IndexedSeq), TermName("canBuildFrom")), List(TypeTree())), List())))), ValDef(Modifiers(), TermName("wal"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("createWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), ValDef(Modifiers(), TermName("readData"), TypeTree(), Apply(TypeApply(Select(Apply(Select(Apply(TypeApply(Select(Select(Select(Ident(scala), scala.collection), scala.collection.JavaConverters), TermName("asScalaIteratorConverter")), List(TypeTree())), List(Apply(Select(Ident(TermName("wal")), TermName("readAll")), List()))), TermName("asScala")), List()), TermName("map")), List(TypeTree())), List(Block(List(), Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("byteBuffer"), TypeTree(), EmptyTree))), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("byteBufferToString")), List(Ident(TermName("byteBuffer")))))), Function(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("byteBuffer"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("byteBuffer")))))))))), Apply(Select(Ident(TermName("wal")), TermName("close")), List())), If(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Select(Ident(java), java.util), java.util.concurrent), java.util.concurrent.RejectedExecutionException)))), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(TypeApply(Select(Ident(TermName("readData")), TermName("toArray")), List(TypeTree())), List(Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(String)))), TypeTree()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))), Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(java.util.concurrent.RejectedExecutionException)))), TypeTree()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(214)))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Apply(Select(Ident(TermName("readData")), TermName("toSeq")), List())))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Ident(TermName("writtenData")))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(216))))))))))
// TypeTree()
// Block(List(ValDef(Modifiers(), TermName("writtenData"), TypeTree(), Apply(TypeApply(Select(Apply(Select(Apply(Select(Select(Ident(scala), scala.Predef), TermName("intWrapper")), List(Literal(Constant(1)))), TermName("to")), List(Literal(Constant(10)))), TermName("flatMap")), List(TypeTree(), TypeTree())), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("i"), TypeTree(), EmptyTree))), TypeTree(), Block(List(ValDef(Modifiers(), TermName("data"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List())), ValDef(Modifiers(), TermName("file"), TypeTree(), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), TermName("$plus")), List(Apply(Select(Apply(Select(Apply(Select(Literal(Constant("/log-")), TermName("$plus")), List(Ident(TermName("i")))), TermName("$plus")), List(Literal(Constant("-")))), TermName("$plus")), List(Ident(TermName("i"))))))), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataManually")), List(Ident(TermName("data")), Ident(TermName("file")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), Ident(TermName("data"))))), Function(List(ValDef(Modifiers(PARAM), TermName("i"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("i")))))), Apply(TypeApply(Select(Select(This(TypeName("immutable")), scala.collection.immutable.IndexedSeq), TermName("canBuildFrom")), List(TypeTree())), List())))), ValDef(Modifiers(), TermName("wal"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("createWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), ValDef(Modifiers(), TermName("readData"), TypeTree(), Apply(TypeApply(Select(Apply(Select(Apply(TypeApply(Select(Select(Select(Ident(scala), scala.collection), scala.collection.JavaConverters), TermName("asScalaIteratorConverter")), List(TypeTree())), List(Apply(Select(Ident(TermName("wal")), TermName("readAll")), List()))), TermName("asScala")), List()), TermName("map")), List(TypeTree())), List(Block(List(), Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("byteBuffer"), TypeTree(), EmptyTree))), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("byteBufferToString")), List(Ident(TermName("byteBuffer")))))), Function(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("byteBuffer"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("byteBuffer")))))))))), Apply(Select(Ident(TermName("wal")), TermName("close")), List())), If(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Select(Ident(java), java.util), java.util.concurrent), java.util.concurrent.RejectedExecutionException)))), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(TypeApply(Select(Ident(TermName("readData")), TermName("toArray")), List(TypeTree())), List(Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(String)))), TypeTree()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))), Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(java.util.concurrent.RejectedExecutionException)))), TypeTree()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(214)))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Apply(Select(Ident(TermName("readData")), TermName("toSeq")), List())))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Ident(TermName("writtenData")))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(216)))))))))
// ValDef(Modifiers(), TermName("writtenData"), TypeTree(), Apply(TypeApply(Select(Apply(Select(Apply(Select(Select(Ident(scala), scala.Predef), TermName("intWrapper")), List(Literal(Constant(1)))), TermName("to")), List(Literal(Constant(10)))), TermName("flatMap")), List(TypeTree(), TypeTree())), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("i"), TypeTree(), EmptyTree))), TypeTree(), Block(List(ValDef(Modifiers(), TermName("data"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("generateRandomData")), List())), ValDef(Modifiers(), TermName("file"), TypeTree(), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), TermName("$plus")), List(Apply(Select(Apply(Select(Apply(Select(Literal(Constant("/log-")), TermName("$plus")), List(Ident(TermName("i")))), TermName("$plus")), List(Literal(Constant("-")))), TermName("$plus")), List(Ident(TermName("i"))))))), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("writeDataManually")), List(Ident(TermName("data")), Ident(TermName("file")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching"))))), Ident(TermName("data"))))), Function(List(ValDef(Modifiers(PARAM), TermName("i"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("i")))))), Apply(TypeApply(Select(Select(This(TypeName("immutable")), scala.collection.immutable.IndexedSeq), TermName("canBuildFrom")), List(TypeTree())), List()))))
// ValDef(Modifiers(), TermName("wal"), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("createWriteAheadLog")), List(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("testDir")), List()), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Select(This(TypeName("CommonWriteAheadLogTests")), TermName("allowBatching")))))
// ValDef(Modifiers(), TermName("readData"), TypeTree(), Apply(TypeApply(Select(Apply(Select(Apply(TypeApply(Select(Select(Select(Ident(scala), scala.collection), scala.collection.JavaConverters), TermName("asScalaIteratorConverter")), List(TypeTree())), List(Apply(Select(Ident(TermName("wal")), TermName("readAll")), List()))), TermName("asScala")), List()), TermName("map")), List(TypeTree())), List(Block(List(), Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("byteBuffer"), TypeTree(), EmptyTree))), TypeTree(), Apply(Select(Ident(org.apache.spark.streaming.util.WriteAheadLogSuite), TermName("byteBufferToString")), List(Ident(TermName("byteBuffer")))))), Function(List(ValDef(Modifiers(PARAM | SYNTHETIC), TermName("byteBuffer"), TypeTree(), EmptyTree)), Apply(Ident(TermName("$anonfun$new")), List(Ident(TermName("byteBuffer"))))))))))
// Apply(Select(Ident(TermName("wal")), TermName("close")), List())
// Select(Ident(TermName("wal")), TermName("close"))
// Ident(TermName("wal"))
// If(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite")), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Select(Ident(java), java.util), java.util.concurrent), java.util.concurrent.RejectedExecutionException)))), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(TypeApply(Select(Ident(TermName("readData")), TermName("toArray")), List(TypeTree())), List(Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(String)))), TypeTree()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))), Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(java.util.concurrent.RejectedExecutionException)))), TypeTree()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(214)))))), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Apply(Select(Ident(TermName("readData")), TermName("toSeq")), List())))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Ident(TermName("writtenData")))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(216))))))))
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("closeFileAfterWrite"))
// This(TypeName("CommonWriteAheadLogTests"))
// Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Select(Ident(java), java.util), java.util.concurrent), java.util.concurrent.RejectedExecutionException)))), List(Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(TypeApply(Select(Ident(TermName("readData")), TermName("toArray")), List(TypeTree())), List(Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(String)))), TypeTree()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))), Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(java.util.concurrent.RejectedExecutionException)))), TypeTree()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(214))))))
// TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept")), List(TypeTree().setOriginal(Select(Select(Select(Ident(java), java.util), java.util.concurrent), java.util.concurrent.RejectedExecutionException))))
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("intercept"))
// This(TypeName("CommonWriteAheadLogTests"))
// TypeTree().setOriginal(Select(Select(Select(Ident(java), java.util), java.util.concurrent), java.util.concurrent.RejectedExecutionException))
// Block(List(DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(TypeApply(Select(Ident(TermName("readData")), TermName("toArray")), List(TypeTree())), List(Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(String)))), TypeTree()))))), Function(List(), Apply(Ident(TermName("$anonfun$new")), List())))
// DefDef(Modifiers(FINAL | METHOD | ARTIFACT), TermName("$anonfun$new"), List(), List(List()), TypeTree(), Apply(TypeApply(Select(Ident(TermName("readData")), TermName("toArray")), List(TypeTree())), List(Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(String)))), TypeTree()))))
// TypeTree()
// Apply(TypeApply(Select(Ident(TermName("readData")), TermName("toArray")), List(TypeTree())), List(Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(String)))), TypeTree())))
// TypeApply(Select(Ident(TermName("readData")), TermName("toArray")), List(TypeTree()))
// Select(Ident(TermName("readData")), TermName("toArray"))
// Ident(TermName("readData"))
// TypeTree()
// Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(String)))), TypeTree())
// Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(String))))
// TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree()))
// Select(Ident(scala.reflect.ClassTag), TermName("apply"))
// Ident(scala.reflect.ClassTag)
// TypeTree()
// Literal(Constant(String))
// TypeTree()
// Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))
// Apply(Ident(TermName("$anonfun$new")), List())
// Ident(TermName("$anonfun$new"))
// Typed(Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(java.util.concurrent.RejectedExecutionException)))), TypeTree())
// Apply(TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree())), List(Literal(Constant(java.util.concurrent.RejectedExecutionException))))
// TypeApply(Select(Ident(scala.reflect.ClassTag), TermName("apply")), List(TypeTree()))
// Select(Ident(scala.reflect.ClassTag), TermName("apply"))
// Ident(scala.reflect.ClassTag)
// TypeTree()
// Literal(Constant(java.util.concurrent.RejectedExecutionException))
// TypeTree()
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(214))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(214))
// Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Apply(Select(Ident(TermName("readData")), TermName("toSeq")), List())))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Ident(TermName("writtenData")))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))), Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(216)))))))
// ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_expr"), TypeTree(), Block(List(ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_left"), TypeTree(), Apply(TypeApply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("convertToEqualizer")), List(TypeTree())), List(Apply(Select(Ident(TermName("readData")), TermName("toSeq")), List())))), ValDef(Modifiers(), TermName("$org_scalatest_assert_macro_right"), TypeTree(), Ident(TermName("writtenData")))), Apply(Select(Select(Select(Ident(org), org.scalactic), org.scalactic.Bool), TermName("binaryMacroBool")), List(Ident(TermName("$org_scalatest_assert_macro_left")), Literal(Constant("===")), Ident(TermName("$org_scalatest_assert_macro_right")), Apply(Select(Ident(TermName("$org_scalatest_assert_macro_left")), TermName("$eq$eq$eq")), List(Ident(TermName("$org_scalatest_assert_macro_right")), Apply(TypeApply(Select(Select(This(TypeName("scalactic")), org.scalactic.Equality), TermName("default")), List(TypeTree())), List()))), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())))))
// Apply(Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert")), List(Ident(TermName("$org_scalatest_assert_macro_expr")), Literal(Constant("")), Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List()), Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(216))))))
// Select(Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List()), TermName("macroAssert"))
// Apply(Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper")), List())
// Select(This(TypeName("CommonWriteAheadLogTests")), TermName("assertionsHelper"))
// This(TypeName("CommonWriteAheadLogTests"))
// Ident(TermName("$org_scalatest_assert_macro_expr"))
// Literal(Constant(""))
// Apply(Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default")), List())
// Select(Select(This(TypeName("scalactic")), org.scalactic.Prettifier), TermName("default"))
// Select(This(TypeName("scalactic")), org.scalactic.Prettifier)
// This(TypeName("scalactic"))
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(216))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(216))
// Function(List(), Apply(Ident(TermName("$anonfun$new")), List()))
// Apply(Ident(TermName("$anonfun$new")), List())
// Ident(TermName("$anonfun$new"))
// Apply(Select(New(TypeTree()), termNames.CONSTRUCTOR), List(Literal(Constant("WriteAheadLogSuite.scala")), Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.")), Literal(Constant(198))))
// Select(New(TypeTree()), termNames.CONSTRUCTOR)
// New(TypeTree())
// TypeTree()
// Literal(Constant("WriteAheadLogSuite.scala"))
// Literal(Constant("Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature."))
// Literal(Constant(198))
public  class CommonWriteAheadLogTests$ implements scala.Serializable {
  /**
   * Static reference to the singleton instance of this Scala object.
   */
  public static final CommonWriteAheadLogTests$ MODULE$ = null;
  public   CommonWriteAheadLogTests$ ()  { throw new RuntimeException(); }
}
